services:
  web:
    build: .

    ports:
      - '8000:8000'

    env_file:
      - .env

    volumes:
      - .:/app

    depends_on:
      db:
        condition: service_healthy

      createbuckets:
        condition: service_completed_successfully

  db:
    image: postgres:17

    ports:
      - '5434:5432'

    env_file:
      - .env.db

    volumes:
      - postgres_data:/var/lib/postgresql/data/

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s    
      timeout: 5s     
      retries: 5 

  minio:
    image: minio/minio:latest

    ports:
      - '9001:9001'
      - '9000:9000'

    volumes:
      - minio_data:/data

    env_file:
      - .env.minio

    command: server /data --console-address ":9001"
    
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  createbuckets:
    image: minio/mc

    depends_on:
      minio:
        condition: service_healthy
    
    environment:
    - MINIO_SERVER_URL=http://minio:9000
    - MINIO_ACCESS_KEY=${S3_ACCESS_KEY}
    - MINIO_SECRET_KEY=${S3_SECRET_KEY}
    - MINIO_BUCKET_NAME=${S3_BUCKET_NAME}

    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      
      until /usr/bin/mc alias set myminio $$MINIO_SERVER_URL $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY; do
        echo '... MinIO not ready, waiting 5 seconds...';
        sleep 5;
      done;
      
      echo 'MinIO is ready. Creating bucket...';
      
      /usr/bin/mc mb myminio/$$MINIO_BUCKET_NAME --ignore-existing;
      
      /usr/bin/mc policy set public myminio/$$MINIO_BUCKET_NAME;
      
      echo 'Bucket setup complete.';
      exit 0;
      "

volumes:
  postgres_data:

  minio_data: